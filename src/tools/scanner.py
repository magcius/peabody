
import json
import sys
import xml.etree.ElementTree

ARG_TYPES = {
    'int': 'i',
    'uint': 'u',
    'fixed': 'f',
    'string': 's',
    'object': 'o',
    'new_id': 'n',
    'array': 'a',
    'fd': 'h',
}

def scan_arg(arg):

    argtype = ARG_TYPES[arg.attrib['type']]

    nullable = (arg.attrib.get('allow-null', '') == "true")
    if nullable:
        prefix = '?'
    else:
        prefix = ''

    interface = arg.attrib.get('interface', '')

    if argtype == 'n' and not interface:
        # registry.bind, expands to name, version, obj
        return ['s', 'u', 'n']

    return [prefix + argtype + interface]

def scan_signature(node):
    types = []
    for child in node:
        if child.tag == 'arg':
            types += scan_arg(child)
    return '            ["%s", %s],' % (node.attrib['name'], json.dumps(types))

ENUM = '''
    var %(fqname)s = {
%(entries)s
    };
    wl.%(fqname)s = %(fqname)s;
'''.rstrip()

def scan_enum(prefix, enum):
    fqname = ('%s_%s' % (prefix, enum.attrib['name'])).upper()
    entries = []

    for child in enum:
        if child.tag == 'entry':
            entry = "        '%s': %s," % (child.attrib['name'].upper(), child.attrib['value'])
            if 'summary' in child.attrib:
                entry += ' // %s' % (child.attrib['summary'],)
            entries.append(entry)

    return (ENUM % { "fqname": fqname,
                     "entries": '\n'.join(entries) })

INTERFACE = '''
    %(enums)s

    var %(name)s = wl.Resource.create({
        name: '%(name)s',
        version: %(version)s,

        requests: [
%(requests)s
        ],

        events: [
%(events)s
        ],
    });
    wl.%(name)s = %(name)s;
'''.lstrip()

def scan_interface(iface):
    enums = []
    requests = []
    events = []

    for child in iface:
        if child.tag == 'enum':
            enums.append(scan_enum(iface.attrib['name'], child))
        elif child.tag == 'request':
            requests.append(scan_signature(child))
        elif child.tag == 'event':
            events.append(scan_signature(child))

    return (INTERFACE % { "name": iface.attrib['name'],
                          "version": iface.attrib['version'],
                          "requests": '\n'.join(requests),
                          "events": '\n'.join(events),
                          "enums": '\n'.join(enums) })

PROTOCOL = '''
// Generated by scanner.py
// Do not edit.

/*****
%(copyright)s
 *****/

(function(wl) {
    "use strict";

%(contents)s
})(window.wl);
'''

def scan_protocol(protocol):
    copyright = ''
    interfaces = []
    exports = []

    for child in protocol:
        if child.tag == 'copyright':
            copyright = child.text
        if child.tag == 'interface':
            interfaces.append(scan_interface(child))

    return (PROTOCOL % { "name": protocol.attrib['name'],
                         "copyright": copyright,
                         "contents": ''.join(interfaces),
                         "exports": '\n'.join(exports) })

def scan(data):
    protocol = xml.etree.ElementTree.fromstring(data)
    print scan_protocol(protocol).encode('utf8')

scan(sys.stdin.read())
