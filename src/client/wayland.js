
// Generated by scanner.py
// Do not edit.

/*****

    Copyright © 2008-2011 Kristian Høgsberg
    Copyright © 2010-2011 Intel Corporation
    Copyright © 2012-2013 Collabora, Ltd.

    Permission to use, copy, modify, distribute, and sell this
    software and its documentation for any purpose is hereby granted
    without fee, provided that the above copyright notice appear in
    all copies and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of
    the copyright holders not be used in advertising or publicity
    pertaining to distribution of the software without specific,
    written prior permission.  The copyright holders make no
    representations about the suitability of this software for any
    purpose.  It is provided "as is" without express or implied
    warranty.

    THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
    SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
    AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
    ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
    THIS SOFTWARE.
  
 *****/

(function(wl) {
    "use strict";


    var WL_DISPLAY_ERROR = {
        'INVALID_OBJECT': 0, // server couldn't find object
        'INVALID_METHOD': 1, // method doesn't exist on the specified interface
        'NO_MEMORY': 2, // server is out of memory
    };
    wl.WL_DISPLAY_ERROR = WL_DISPLAY_ERROR;

    var wl_display = wl.Resource.create({
        name: 'wl_display',
        version: 1,

        requests: [
            ["sync", "n"],
            ["get_registry", "n"],
        ],

        events: [
            ["error", "ous"],
            ["delete_id", "u"],
        ],
    });
    wl.wl_display = wl_display;


    var wl_registry = wl.Resource.create({
        name: 'wl_registry',
        version: 1,

        requests: [
            ["bind", "usun"],
        ],

        events: [
            ["global", "usu"],
            ["global_remove", "u"],
        ],
    });
    wl.wl_registry = wl_registry;


    var wl_callback = wl.Resource.create({
        name: 'wl_callback',
        version: 1,

        requests: [

        ],

        events: [
            ["done", "u"],
        ],
    });
    wl.wl_callback = wl_callback;


    var wl_compositor = wl.Resource.create({
        name: 'wl_compositor',
        version: 3,

        requests: [
            ["create_surface", "n"],
            ["create_region", "n"],
        ],

        events: [

        ],
    });
    wl.wl_compositor = wl_compositor;


    var wl_shm_pool = wl.Resource.create({
        name: 'wl_shm_pool',
        version: 1,

        requests: [
            ["create_buffer", "niiiiu"],
            ["destroy", ""],
            ["resize", "i"],
        ],

        events: [

        ],
    });
    wl.wl_shm_pool = wl_shm_pool;

    var WL_SHM_ERROR = {
        'INVALID_FORMAT': 0, // buffer format is not known
        'INVALID_STRIDE': 1, // invalid size or stride during pool or buffer creation
        'INVALID_FD': 2, // mmapping the file descriptor failed
    };
    wl.WL_SHM_ERROR = WL_SHM_ERROR;

    var WL_SHM_FORMAT = {
        'ARGB8888': 0, // 32-bit ARGB format
        'XRGB8888': 1, // 32-bit RGB format
        'C8': 0x20203843,
        'RGB332': 0x38424752,
        'BGR233': 0x38524742,
        'XRGB4444': 0x32315258,
        'XBGR4444': 0x32314258,
        'RGBX4444': 0x32315852,
        'BGRX4444': 0x32315842,
        'ARGB4444': 0x32315241,
        'ABGR4444': 0x32314241,
        'RGBA4444': 0x32314152,
        'BGRA4444': 0x32314142,
        'XRGB1555': 0x35315258,
        'XBGR1555': 0x35314258,
        'RGBX5551': 0x35315852,
        'BGRX5551': 0x35315842,
        'ARGB1555': 0x35315241,
        'ABGR1555': 0x35314241,
        'RGBA5551': 0x35314152,
        'BGRA5551': 0x35314142,
        'RGB565': 0x36314752,
        'BGR565': 0x36314742,
        'RGB888': 0x34324752,
        'BGR888': 0x34324742,
        'XBGR8888': 0x34324258,
        'RGBX8888': 0x34325852,
        'BGRX8888': 0x34325842,
        'ABGR8888': 0x34324241,
        'RGBA8888': 0x34324152,
        'BGRA8888': 0x34324142,
        'XRGB2101010': 0x30335258,
        'XBGR2101010': 0x30334258,
        'RGBX1010102': 0x30335852,
        'BGRX1010102': 0x30335842,
        'ARGB2101010': 0x30335241,
        'ABGR2101010': 0x30334241,
        'RGBA1010102': 0x30334152,
        'BGRA1010102': 0x30334142,
        'YUYV': 0x56595559,
        'YVYU': 0x55595659,
        'UYVY': 0x59565955,
        'VYUY': 0x59555956,
        'AYUV': 0x56555941,
        'NV12': 0x3231564e,
        'NV21': 0x3132564e,
        'NV16': 0x3631564e,
        'NV61': 0x3136564e,
        'YUV410': 0x39565559,
        'YVU410': 0x39555659,
        'YUV411': 0x31315559,
        'YVU411': 0x31315659,
        'YUV420': 0x32315559,
        'YVU420': 0x32315659,
        'YUV422': 0x36315559,
        'YVU422': 0x36315659,
        'YUV444': 0x34325559,
        'YVU444': 0x34325659,
    };
    wl.WL_SHM_FORMAT = WL_SHM_FORMAT;

    var wl_shm = wl.Resource.create({
        name: 'wl_shm',
        version: 1,

        requests: [
            ["create_pool", "nhi"],
        ],

        events: [
            ["format", "u"],
        ],
    });
    wl.wl_shm = wl_shm;


    var wl_buffer = wl.Resource.create({
        name: 'wl_buffer',
        version: 1,

        requests: [
            ["destroy", ""],
        ],

        events: [
            ["release", ""],
        ],
    });
    wl.wl_buffer = wl_buffer;


    var wl_data_offer = wl.Resource.create({
        name: 'wl_data_offer',
        version: 1,

        requests: [
            ["accept", "u?s"],
            ["receive", "sh"],
            ["destroy", ""],
        ],

        events: [
            ["offer", "s"],
        ],
    });
    wl.wl_data_offer = wl_data_offer;


    var wl_data_source = wl.Resource.create({
        name: 'wl_data_source',
        version: 1,

        requests: [
            ["offer", "s"],
            ["destroy", ""],
        ],

        events: [
            ["target", "?s"],
            ["send", "sh"],
            ["cancelled", ""],
        ],
    });
    wl.wl_data_source = wl_data_source;


    var wl_data_device = wl.Resource.create({
        name: 'wl_data_device',
        version: 1,

        requests: [
            ["start_drag", "?oo?ou"],
            ["set_selection", "?ou"],
        ],

        events: [
            ["data_offer", "n"],
            ["enter", "uoff?o"],
            ["leave", ""],
            ["motion", "uff"],
            ["drop", ""],
            ["selection", "?o"],
        ],
    });
    wl.wl_data_device = wl_data_device;


    var wl_data_device_manager = wl.Resource.create({
        name: 'wl_data_device_manager',
        version: 1,

        requests: [
            ["create_data_source", "n"],
            ["get_data_device", "no"],
        ],

        events: [

        ],
    });
    wl.wl_data_device_manager = wl_data_device_manager;


    var wl_shell = wl.Resource.create({
        name: 'wl_shell',
        version: 1,

        requests: [
            ["get_shell_surface", "no"],
        ],

        events: [

        ],
    });
    wl.wl_shell = wl_shell;

    var WL_SHELL_SURFACE_RESIZE = {
        'NONE': 0,
        'TOP': 1,
        'BOTTOM': 2,
        'LEFT': 4,
        'TOP_LEFT': 5,
        'BOTTOM_LEFT': 6,
        'RIGHT': 8,
        'TOP_RIGHT': 9,
        'BOTTOM_RIGHT': 10,
    };
    wl.WL_SHELL_SURFACE_RESIZE = WL_SHELL_SURFACE_RESIZE;

    var WL_SHELL_SURFACE_TRANSIENT = {
        'INACTIVE': 0x1, // do not set keyboard focus
    };
    wl.WL_SHELL_SURFACE_TRANSIENT = WL_SHELL_SURFACE_TRANSIENT;

    var WL_SHELL_SURFACE_FULLSCREEN_METHOD = {
        'DEFAULT': 0, // no preference, apply default policy
        'SCALE': 1, // scale, preserve the surface's aspect ratio and center on output
        'DRIVER': 2, // switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch
        'FILL': 3, // no upscaling, center on output and add black borders to compensate size mismatch
    };
    wl.WL_SHELL_SURFACE_FULLSCREEN_METHOD = WL_SHELL_SURFACE_FULLSCREEN_METHOD;

    var wl_shell_surface = wl.Resource.create({
        name: 'wl_shell_surface',
        version: 1,

        requests: [
            ["pong", "u"],
            ["move", "ou"],
            ["resize", "ouu"],
            ["set_toplevel", ""],
            ["set_transient", "oiiu"],
            ["set_fullscreen", "uu?o"],
            ["set_popup", "ouoiiu"],
            ["set_maximized", "?o"],
            ["set_title", "s"],
            ["set_class", "s"],
        ],

        events: [
            ["ping", "u"],
            ["configure", "uii"],
            ["popup_done", ""],
        ],
    });
    wl.wl_shell_surface = wl_shell_surface;

    var WL_SURFACE_ERROR = {
        'INVALID_SCALE': 0, // buffer scale value is invalid
        'INVALID_TRANSFORM': 1, // buffer transform value is invalid
    };
    wl.WL_SURFACE_ERROR = WL_SURFACE_ERROR;

    var wl_surface = wl.Resource.create({
        name: 'wl_surface',
        version: 3,

        requests: [
            ["destroy", ""],
            ["attach", "?oii"],
            ["damage", "iiii"],
            ["frame", "n"],
            ["set_opaque_region", "?o"],
            ["set_input_region", "?o"],
            ["commit", ""],
            ["set_buffer_transform", "i"],
            ["set_buffer_scale", "i"],
        ],

        events: [
            ["enter", "o"],
            ["leave", "o"],
        ],
    });
    wl.wl_surface = wl_surface;

    var WL_SEAT_CAPABILITY = {
        'POINTER': 1, // The seat has pointer devices
        'KEYBOARD': 2, // The seat has one or more keyboards
        'TOUCH': 4, // The seat has touch devices
    };
    wl.WL_SEAT_CAPABILITY = WL_SEAT_CAPABILITY;

    var wl_seat = wl.Resource.create({
        name: 'wl_seat',
        version: 4,

        requests: [
            ["get_pointer", "n"],
            ["get_keyboard", "n"],
            ["get_touch", "n"],
        ],

        events: [
            ["capabilities", "u"],
            ["name", "s"],
        ],
    });
    wl.wl_seat = wl_seat;

    var WL_POINTER_BUTTON_STATE = {
        'RELEASED': 0, // The button is not pressed
        'PRESSED': 1, // The button is pressed
    };
    wl.WL_POINTER_BUTTON_STATE = WL_POINTER_BUTTON_STATE;

    var WL_POINTER_AXIS = {
        'VERTICAL_SCROLL': 0,
        'HORIZONTAL_SCROLL': 1,
    };
    wl.WL_POINTER_AXIS = WL_POINTER_AXIS;

    var wl_pointer = wl.Resource.create({
        name: 'wl_pointer',
        version: 3,

        requests: [
            ["set_cursor", "u?oii"],
            ["release", ""],
        ],

        events: [
            ["enter", "uoff"],
            ["leave", "uo"],
            ["motion", "uff"],
            ["button", "uuuu"],
            ["axis", "uuf"],
        ],
    });
    wl.wl_pointer = wl_pointer;

    var WL_KEYBOARD_KEYMAP_FORMAT = {
        'NO_KEYMAP': 0, // no keymap; client must understand how to interpret the raw keycode
        'XKB_V1': 1, // libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode
    };
    wl.WL_KEYBOARD_KEYMAP_FORMAT = WL_KEYBOARD_KEYMAP_FORMAT;

    var WL_KEYBOARD_KEY_STATE = {
        'RELEASED': 0, // key is not pressed
        'PRESSED': 1, // key is pressed
    };
    wl.WL_KEYBOARD_KEY_STATE = WL_KEYBOARD_KEY_STATE;

    var wl_keyboard = wl.Resource.create({
        name: 'wl_keyboard',
        version: 4,

        requests: [
            ["release", ""],
        ],

        events: [
            ["keymap", "uhu"],
            ["enter", "uoa"],
            ["leave", "uo"],
            ["key", "uuuu"],
            ["modifiers", "uuuuu"],
            ["repeat_info", "ii"],
        ],
    });
    wl.wl_keyboard = wl_keyboard;


    var wl_touch = wl.Resource.create({
        name: 'wl_touch',
        version: 3,

        requests: [
            ["release", ""],
        ],

        events: [
            ["down", "uuoiff"],
            ["up", "uui"],
            ["motion", "uiff"],
            ["frame", ""],
            ["cancel", ""],
        ],
    });
    wl.wl_touch = wl_touch;

    var WL_OUTPUT_SUBPIXEL = {
        'UNKNOWN': 0,
        'NONE': 1,
        'HORIZONTAL_RGB': 2,
        'HORIZONTAL_BGR': 3,
        'VERTICAL_RGB': 4,
        'VERTICAL_BGR': 5,
    };
    wl.WL_OUTPUT_SUBPIXEL = WL_OUTPUT_SUBPIXEL;

    var WL_OUTPUT_TRANSFORM = {
        'NORMAL': 0,
        '90': 1,
        '180': 2,
        '270': 3,
        'FLIPPED': 4,
        'FLIPPED_90': 5,
        'FLIPPED_180': 6,
        'FLIPPED_270': 7,
    };
    wl.WL_OUTPUT_TRANSFORM = WL_OUTPUT_TRANSFORM;

    var WL_OUTPUT_MODE = {
        'CURRENT': 0x1, // indicates this is the current mode
        'PREFERRED': 0x2, // indicates this is the preferred mode
    };
    wl.WL_OUTPUT_MODE = WL_OUTPUT_MODE;

    var wl_output = wl.Resource.create({
        name: 'wl_output',
        version: 2,

        requests: [

        ],

        events: [
            ["geometry", "iiiiissi"],
            ["mode", "uiii"],
            ["done", ""],
            ["scale", "i"],
        ],
    });
    wl.wl_output = wl_output;


    var wl_region = wl.Resource.create({
        name: 'wl_region',
        version: 1,

        requests: [
            ["destroy", ""],
            ["add", "iiii"],
            ["subtract", "iiii"],
        ],

        events: [

        ],
    });
    wl.wl_region = wl_region;

    var WL_SUBCOMPOSITOR_ERROR = {
        'BAD_SURFACE': 0, // the to-be sub-surface is invalid
    };
    wl.WL_SUBCOMPOSITOR_ERROR = WL_SUBCOMPOSITOR_ERROR;

    var wl_subcompositor = wl.Resource.create({
        name: 'wl_subcompositor',
        version: 1,

        requests: [
            ["destroy", ""],
            ["get_subsurface", "noo"],
        ],

        events: [

        ],
    });
    wl.wl_subcompositor = wl_subcompositor;

    var WL_SUBSURFACE_ERROR = {
        'BAD_SURFACE': 0, // wl_surface is not a sibling or the parent
    };
    wl.WL_SUBSURFACE_ERROR = WL_SUBSURFACE_ERROR;

    var wl_subsurface = wl.Resource.create({
        name: 'wl_subsurface',
        version: 1,

        requests: [
            ["destroy", ""],
            ["set_position", "ii"],
            ["place_above", "o"],
            ["place_below", "o"],
            ["set_sync", ""],
            ["set_desync", ""],
        ],

        events: [

        ],
    });
    wl.wl_subsurface = wl_subsurface;

})(window.wl);

